name: ci
on: push
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: cachix/install-nix-action@v15
        with:
          nix_path: nixpkgs=channel:nixos-unstable
          extra_nix_config: keep-outputs = true
      - uses: cachix/cachix-action@v10
        with:
          name: kgtkr
          authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'
      - name: Build devShell
        run: |
          nix build .#devShell.$(nix eval --expr 'builtins.currentSystem' --impure --raw) --out-link result-devShell
          nix print-dev-env > result-devShell.sh
          echo "BASH_ENV=$PWD/result-devShell.sh" >> $GITHUB_ENV
      - name: Install dependencies
        run: |
          nix profile install --inputs-from . nixpkgs#skopeo
      - name: Cache cargo target
        uses: actions/cache@v3
        with:
          path: ./target
          key: cargo-cache-20220809-1-${{ github.sha }}
          restore-keys: |
            cargo-cache-20220809-1-
      - name: Cache cargo home
        uses: actions/cache@v3
        with:
          path: ~/.cargo
          key: cargo-home-20220809-1-${{ github.sha }}
          restore-keys: |
            cargo-home-20220809-1-
      - name: Format
        run: |
          cargo fmt --check
      - name: Lint
        # cargo clippyはglibcの関係でLinuxで動かないのでとりあえず
        run: |
          cargo-clippy
      - name: Test
        run: |
          cargo test
      - name: crate2nix
        run: |
          crate2nix generate
          git diff --exit-code
      - name: Build server
        run: |
          nix build .#tkvs-server --out-link result-server
      - uses: actions/upload-artifact@v3
        with:
          name: tkvs-server
          path: result-server/bin/tkvs-server
      - name: Build client
        run: |
          nix build .#tkvs-client --out-link result-client
      - uses: actions/upload-artifact@v3
        with:
          name: tkvs-client
          path: result-client/bin/tkvs-client
      - name: Docker build
        run: |
          nix build .#tkvs-server-docker --out-link result-docker
      - uses: actions/upload-artifact@v3
        with:
          name: tkvs-server-docker
          path: result-docker
      -
        name: Docker login
        run: |
          skopeo login ghcr.io -u "$DOCKER_USER" -p "$DOCKER_PASS"
        env:
          DOCKER_USER: ${{ github.repository_owner }}
          DOCKER_PASS: ${{ secrets.GITHUB_TOKEN }}
      -
        name: Generate tags
        uses: kgtkr/docker-tags-gen-action@master
        id: tags
        with:
          name: ghcr.io/${{ github.repository_owner }}/tkvs-server
      -
        name: Docker push
        run: |
          TAGS=${{ steps.tags.outputs.tags }}
          for TAG in ${TAGS//,/ }; do
            skopeo copy docker-archive:result-docker "docker://$TAG"
          done
  crash-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: cachix/install-nix-action@v15
        with:
          nix_path: nixpkgs=channel:nixos-unstable
          extra_nix_config: keep-outputs = true
      - uses: cachix/cachix-action@v10
        with:
          name: kgtkr
          authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'
      - name: Build devShell
        run: |
          nix build .#devShell.$(nix eval --expr 'builtins.currentSystem' --impure --raw) --out-link result-devShell
          nix print-dev-env > result-devShell.sh
          echo "BASH_ENV=$PWD/result-devShell.sh" >> $GITHUB_ENV
      - name: Cache cargo target
        uses: actions/cache@v3
        with:
          path: ./target
          key: crash-test-cargo-cache-20220811-1-${{ github.sha }}
          restore-keys: |
            crash-test-cargo-cache-20220811-1-
      - name: Cache cargo home
        uses: actions/cache@v3
        with:
          path: ~/.cargo
          key: crash-test-cargo-home-20220811-1-${{ github.sha }}
          restore-keys: |
            crash-test-cargo-home-20220811-1-
      - name: Run crash test
        run: |
          make runN
        timeout-minutes: 15
        working-directory: ./crash-test

